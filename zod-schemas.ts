// Generated by ts-to-zod
import { z } from 'zod';
import {
  type ProjectMilestoneFilter,
  type ProjectMilestoneCollectionFilter,
  type NullableTemplateFilter,
  type ProjectUpdatesFilter,
  type ProjectUpdatesCollectionFilter,
  type NullableProjectMilestoneFilter,
  type ReactionFilter,
  type ReactionCollectionFilter,
  type CustomerStatusFilter,
  type CustomerTierFilter,
  type AttachmentFilter,
  type NullableUserFilter,
  type AttachmentCollectionFilter,
  type UserFilter,
  type IssueCollectionFilter,
  type InitiativeFilter,
  type NullableTeamFilter,
  type TeamFilter,
  type TeamCollectionFilter,
  type InitiativeCollectionFilter,
  type UserCollectionFilter,
  type NullableCycleFilter,
  type IssueLabelFilter,
  type IssueLabelCollectionFilter,
  type RoadmapFilter,
  type RoadmapCollectionFilter,
  type NullableProjectFilter,
  type CustomerNeedCollectionFilter,
  type ProjectStatusFilter,
  type WorkflowStateFilter,
  type NullableProjectUpdateFilter,
  type ProjectFilter,
  type NullableIssueFilter,
  type CommentCollectionFilter,
  type NullableCommentFilter,
  type NullableCustomerFilter,
  type CustomerNeedFilter,
  type ProjectCollectionFilter,
  type DocumentFilter,
  type NullableDocumentContentFilter,
  type CommentFilter,
  type IssueFilter,
  CyclePeriod,
  SlaStatus,
  SLADayCountType,
  DateResolutionType,
  ProjectUpdateHealthType,
} from './types.js';

export const scalarsSchema = z.object({
  ID: z.string(),
  String: z.string(),
  Boolean: z.boolean(),
  Int: z.number(),
  Float: z.number(),
  DateTime: z.date(),
  DateTimeOrDuration: z.union([z.date(), z.string()]),
  JSON: z.record(z.unknown()),
  JSONObject: z.any(),
  TimelessDate: z.any(),
  TimelessDateOrDuration: z.any(),
  UUID: z.any(),
});

export const nullableDateComparatorSchema = z.object({
  eq: scalarsSchema.shape.DateTimeOrDuration.optional(),
  gt: scalarsSchema.shape.DateTimeOrDuration.optional(),
  gte: scalarsSchema.shape.DateTimeOrDuration.optional(),
  in: z.array(scalarsSchema.shape.DateTimeOrDuration).optional(),
  lt: scalarsSchema.shape.DateTimeOrDuration.optional(),
  lte: scalarsSchema.shape.DateTimeOrDuration.optional(),
  neq: scalarsSchema.shape.DateTimeOrDuration.optional(),
  nin: z.array(scalarsSchema.shape.DateTimeOrDuration).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
});

export const cyclePeriodSchema = z.nativeEnum(CyclePeriod);

export const cyclePeriodComparatorSchema = z.object({
  eq: cyclePeriodSchema.optional(),
  in: z.array(cyclePeriodSchema).optional(),
  neq: cyclePeriodSchema.optional(),
  nin: z.array(cyclePeriodSchema).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
});

export const booleanComparatorSchema = z.object({
  eq: scalarsSchema.shape.Boolean.optional(),
  neq: scalarsSchema.shape.Boolean.optional(),
});

export const dateComparatorSchema = z.object({
  eq: scalarsSchema.shape.DateTimeOrDuration.optional(),
  gt: scalarsSchema.shape.DateTimeOrDuration.optional(),
  gte: scalarsSchema.shape.DateTimeOrDuration.optional(),
  in: z.array(scalarsSchema.shape.DateTimeOrDuration).optional(),
  lt: scalarsSchema.shape.DateTimeOrDuration.optional(),
  lte: scalarsSchema.shape.DateTimeOrDuration.optional(),
  neq: scalarsSchema.shape.DateTimeOrDuration.optional(),
  nin: z.array(scalarsSchema.shape.DateTimeOrDuration).optional(),
});

export const idComparatorSchema = z.object({
  eq: scalarsSchema.shape.ID.optional(),
  in: z.array(scalarsSchema.shape.ID).optional(),
  neq: scalarsSchema.shape.ID.optional(),
  nin: z.array(scalarsSchema.shape.ID).optional(),
});

export const sourceTypeComparatorSchema = z.object({
  contains: scalarsSchema.shape.String.optional(),
  containsIgnoreCase: scalarsSchema.shape.String.optional(),
  eq: scalarsSchema.shape.String.optional(),
  in: z.array(scalarsSchema.shape.String).optional(),
  neq: scalarsSchema.shape.String.optional(),
  nin: z.array(scalarsSchema.shape.String).optional(),
});

export const stringComparatorSchema = z.object({
  contains: scalarsSchema.shape.String.optional(),
  containsIgnoreCase: scalarsSchema.shape.String.optional(),
  eq: scalarsSchema.shape.String.optional(),
  in: z.array(scalarsSchema.shape.String).optional(),
  neq: scalarsSchema.shape.String.optional(),
  nin: z.array(scalarsSchema.shape.String).optional(),
  startsWith: scalarsSchema.shape.String.optional(),
});

export const numberComparatorSchema = z.object({
  eq: scalarsSchema.shape.Float.optional(),
  gt: scalarsSchema.shape.Float.optional(),
  gte: scalarsSchema.shape.Float.optional(),
  in: z.array(scalarsSchema.shape.Float).optional(),
  lt: scalarsSchema.shape.Float.optional(),
  lte: scalarsSchema.shape.Float.optional(),
  neq: scalarsSchema.shape.Float.optional(),
  nin: z.array(scalarsSchema.shape.Float).optional(),
});

export const nullableStringComparatorSchema = z.object({
  contains: scalarsSchema.shape.String.optional(),
  containsIgnoreCase: scalarsSchema.shape.String.optional(),
  eq: scalarsSchema.shape.String.optional(),
  in: z.array(scalarsSchema.shape.String).optional(),
  neq: scalarsSchema.shape.String.optional(),
  nin: z.array(scalarsSchema.shape.String).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
  startsWith: scalarsSchema.shape.String.optional(),
});

export const projectMilestoneFilterSchema: z.ZodSchema<ProjectMilestoneFilter> = z.lazy(() =>
  z.object({
    and: z.array(projectMilestoneFilterSchema).optional(),
    id: idComparatorSchema.optional(),
    name: nullableStringComparatorSchema.optional(),
    or: z.array(projectMilestoneFilterSchema).optional(),
    targetDate: nullableDateComparatorSchema.optional(),
  })
);

export const projectMilestoneCollectionFilterSchema: z.ZodSchema<ProjectMilestoneCollectionFilter> =
  z.lazy(() =>
    z.object({
      and: z.array(projectMilestoneCollectionFilterSchema).optional(),
      every: projectMilestoneFilterSchema.optional(),
      id: idComparatorSchema.optional(),
      length: numberComparatorSchema.optional(),
      name: nullableStringComparatorSchema.optional(),
      or: z.array(projectMilestoneCollectionFilterSchema).optional(),
      some: projectMilestoneFilterSchema.optional(),
      targetDate: nullableDateComparatorSchema.optional(),
    })
  );

export const relationExistsComparatorSchema = z.object({
  eq: scalarsSchema.shape.Boolean.optional(),
  neq: scalarsSchema.shape.Boolean.optional(),
});

export const nullableTemplateFilterSchema: z.ZodSchema<NullableTemplateFilter> = z.lazy(() =>
  z.object({
    and: z.array(nullableTemplateFilterSchema).optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    or: z.array(nullableTemplateFilterSchema).optional(),
    type: stringComparatorSchema.optional(),
  })
);

export const nullableNumberComparatorSchema = z.object({
  eq: scalarsSchema.shape.Float.optional(),
  gt: scalarsSchema.shape.Float.optional(),
  gte: scalarsSchema.shape.Float.optional(),
  in: z.array(scalarsSchema.shape.Float).optional(),
  lt: scalarsSchema.shape.Float.optional(),
  lte: scalarsSchema.shape.Float.optional(),
  neq: scalarsSchema.shape.Float.optional(),
  nin: z.array(scalarsSchema.shape.Float).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
});

export const nullableTimelessDateComparatorSchema = z.object({
  eq: scalarsSchema.shape.TimelessDateOrDuration.optional(),
  gt: scalarsSchema.shape.TimelessDateOrDuration.optional(),
  gte: scalarsSchema.shape.TimelessDateOrDuration.optional(),
  in: z.array(scalarsSchema.shape.TimelessDateOrDuration).optional(),
  lt: scalarsSchema.shape.TimelessDateOrDuration.optional(),
  lte: scalarsSchema.shape.TimelessDateOrDuration.optional(),
  neq: scalarsSchema.shape.TimelessDateOrDuration.optional(),
  nin: z.array(scalarsSchema.shape.TimelessDateOrDuration).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
});

export const estimateComparatorSchema = z.object({
  and: z.array(nullableNumberComparatorSchema).optional(),
  eq: scalarsSchema.shape.Float.optional(),
  gt: scalarsSchema.shape.Float.optional(),
  gte: scalarsSchema.shape.Float.optional(),
  in: z.array(scalarsSchema.shape.Float).optional(),
  lt: scalarsSchema.shape.Float.optional(),
  lte: scalarsSchema.shape.Float.optional(),
  neq: scalarsSchema.shape.Float.optional(),
  nin: z.array(scalarsSchema.shape.Float).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
  or: z.array(nullableNumberComparatorSchema).optional(),
});

export const projectUpdatesFilterSchema: z.ZodSchema<ProjectUpdatesFilter> = z.lazy(() =>
  z.object({
    and: z.array(projectUpdatesFilterSchema).optional(),
    health: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    or: z.array(projectUpdatesFilterSchema).optional(),
  })
);

export const projectUpdatesCollectionFilterSchema: z.ZodSchema<ProjectUpdatesCollectionFilter> =
  z.lazy(() =>
    z.object({
      and: z.array(projectUpdatesCollectionFilterSchema).optional(),
      every: projectUpdatesFilterSchema.optional(),
      health: stringComparatorSchema.optional(),
      id: idComparatorSchema.optional(),
      length: numberComparatorSchema.optional(),
      or: z.array(projectUpdatesCollectionFilterSchema).optional(),
      some: projectUpdatesFilterSchema.optional(),
    })
  );

export const contentComparatorSchema = z.object({
  contains: scalarsSchema.shape.String.optional(),
  notContains: scalarsSchema.shape.String.optional(),
});

export const nullableProjectMilestoneFilterSchema: z.ZodSchema<NullableProjectMilestoneFilter> =
  z.lazy(() =>
    z.object({
      and: z.array(nullableProjectMilestoneFilterSchema).optional(),
      id: idComparatorSchema.optional(),
      name: nullableStringComparatorSchema.optional(),
      null: scalarsSchema.shape.Boolean.optional(),
      or: z.array(nullableProjectMilestoneFilterSchema).optional(),
      targetDate: nullableDateComparatorSchema.optional(),
    })
  );

export const reactionFilterSchema: z.ZodSchema<ReactionFilter> = z.lazy(() =>
  z.object({
    and: z.array(reactionFilterSchema).optional(),
    emoji: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    or: z.array(reactionFilterSchema).optional(),
  })
);

export const reactionCollectionFilterSchema: z.ZodSchema<ReactionCollectionFilter> = z.lazy(() =>
  z.object({
    and: z.array(reactionCollectionFilterSchema).optional(),
    emoji: stringComparatorSchema.optional(),
    every: reactionFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    length: numberComparatorSchema.optional(),
    or: z.array(reactionCollectionFilterSchema).optional(),
    some: reactionFilterSchema.optional(),
  })
);

export const slaStatusSchema = z.nativeEnum(SlaStatus);

export const slaStatusComparatorSchema = z.object({
  eq: slaStatusSchema.optional(),
  in: z.array(slaStatusSchema).optional(),
  neq: slaStatusSchema.optional(),
  nin: z.array(slaStatusSchema).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
});

export const subTypeComparatorSchema = z.object({
  eq: scalarsSchema.shape.String.optional(),
  in: z.array(scalarsSchema.shape.String).optional(),
  neq: scalarsSchema.shape.String.optional(),
  nin: z.array(scalarsSchema.shape.String).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
});

export const sourceMetadataComparatorSchema = z.object({
  eq: scalarsSchema.shape.String.optional(),
  in: z.array(scalarsSchema.shape.String).optional(),
  neq: scalarsSchema.shape.String.optional(),
  nin: z.array(scalarsSchema.shape.String).optional(),
  null: scalarsSchema.shape.Boolean.optional(),
  subType: subTypeComparatorSchema.optional(),
});

export const stringItemComparatorSchema = z.object({
  contains: scalarsSchema.shape.String.optional(),
  eq: scalarsSchema.shape.String.optional(),
  in: z.array(scalarsSchema.shape.String).optional(),
  neq: scalarsSchema.shape.String.optional(),
  nin: z.array(scalarsSchema.shape.String).optional(),
  startsWith: scalarsSchema.shape.String.optional(),
});

export const stringArrayComparatorSchema = z.object({
  every: stringItemComparatorSchema.optional(),
  length: numberComparatorSchema.optional(),
  some: stringItemComparatorSchema.optional(),
});

export const customerStatusFilterSchema: z.ZodSchema<CustomerStatusFilter> = z.lazy(() =>
  z.object({
    and: z.array(customerStatusFilterSchema).optional(),
    color: stringComparatorSchema.optional(),
    description: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(customerStatusFilterSchema).optional(),
    position: numberComparatorSchema.optional(),
    type: stringComparatorSchema.optional(),
  })
);

export const customerTierFilterSchema: z.ZodSchema<CustomerTierFilter> = z.lazy(() =>
  z.object({
    and: z.array(customerTierFilterSchema).optional(),
    color: stringComparatorSchema.optional(),
    description: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(customerTierFilterSchema).optional(),
    position: numberComparatorSchema.optional(),
  })
);

export const sLADayCountTypeSchema = z.nativeEnum(SLADayCountType);

export const issueCreateInputSchema = z.object({
  assigneeId: scalarsSchema.shape.String.optional(),
  completedAt: scalarsSchema.shape.DateTime.optional(),
  description: scalarsSchema.shape.String.optional(),
  dueDate: scalarsSchema.shape.TimelessDate.optional(),
  estimate: scalarsSchema.shape.Int.optional(),
  id: scalarsSchema.shape.String.optional(),
  labelIds: z.array(scalarsSchema.shape.String).optional(),
  parentId: scalarsSchema.shape.String.optional(),
  priority: scalarsSchema.shape.Int.optional(),
  projectId: scalarsSchema.shape.String.optional(),
  stateId: scalarsSchema.shape.String.optional(),
  subscriberIds: z.array(scalarsSchema.shape.String).optional(),
  teamId: scalarsSchema.shape.String,
  title: scalarsSchema.shape.String.optional(),
});

export const issueUpdateInputSchema = z.object({
  assigneeId: scalarsSchema.shape.String.optional(),
  description: scalarsSchema.shape.String.optional(),
  dueDate: scalarsSchema.shape.TimelessDate.optional(),
  estimate: scalarsSchema.shape.Int.optional(),
  labelIds: z.array(scalarsSchema.shape.String).optional(),
  parentId: scalarsSchema.shape.String.optional(),
  priority: scalarsSchema.shape.Int.optional(),
  projectId: scalarsSchema.shape.String.optional(),
  stateId: scalarsSchema.shape.String.optional(),
  subscriberIds: z.array(scalarsSchema.shape.String).optional(),
  teamId: scalarsSchema.shape.String.optional(),
  title: scalarsSchema.shape.String.optional(),
});

export const issueBatchCreateInputSchema = z.object({
  issues: z.array(issueCreateInputSchema),
});

export const commentCreateInputSchema = z.object({
  body: scalarsSchema.shape.String.optional(),
  id: scalarsSchema.shape.String.optional(),
  issueId: scalarsSchema.shape.String.optional(),
  parentId: scalarsSchema.shape.String.optional(),
});

export const projectCreateInputSchema = z.object({
  description: scalarsSchema.shape.String.optional(),
  id: scalarsSchema.shape.String.optional(),
  leadId: scalarsSchema.shape.String.optional(),
  memberIds: z.array(scalarsSchema.shape.String).optional(),
  name: scalarsSchema.shape.String,
  priority: scalarsSchema.shape.Int.optional(),
  startDate: scalarsSchema.shape.TimelessDate.optional(),
  statusId: scalarsSchema.shape.String.optional(),
  targetDate: scalarsSchema.shape.TimelessDate.optional(),
  teamIds: z.array(scalarsSchema.shape.String),
});

export const dateResolutionTypeSchema = z.nativeEnum(DateResolutionType);

export const projectUpdateHealthTypeSchema = z.nativeEnum(ProjectUpdateHealthType);

export const projectUpdateCreateInputSchema = z.object({
  body: scalarsSchema.shape.String.optional(),
  health: projectUpdateHealthTypeSchema.optional(),
  id: scalarsSchema.shape.String.optional(),
  projectId: scalarsSchema.shape.String,
});

export const attachmentFilterSchema: z.ZodSchema<AttachmentFilter> = z.lazy(() =>
  z.object({
    and: z.array(attachmentFilterSchema).optional(),
    creator: nullableUserFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    or: z.array(attachmentFilterSchema).optional(),
    sourceType: sourceTypeComparatorSchema.optional(),
    title: stringComparatorSchema.optional(),
    url: stringComparatorSchema.optional(),
  })
);

export const nullableUserFilterSchema: z.ZodSchema<NullableUserFilter> = z.lazy(() =>
  z.object({
    active: booleanComparatorSchema.optional(),
    and: z.array(nullableUserFilterSchema).optional(),
    assignedIssues: issueCollectionFilterSchema.optional(),
    displayName: stringComparatorSchema.optional(),
    email: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    isMe: booleanComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    or: z.array(nullableUserFilterSchema).optional(),
  })
);

export const attachmentCollectionFilterSchema: z.ZodSchema<AttachmentCollectionFilter> = z.lazy(
  () =>
    z.object({
      and: z.array(attachmentCollectionFilterSchema).optional(),
      creator: nullableUserFilterSchema.optional(),
      every: attachmentFilterSchema.optional(),
      id: idComparatorSchema.optional(),
      length: numberComparatorSchema.optional(),
      or: z.array(attachmentCollectionFilterSchema).optional(),
      some: attachmentFilterSchema.optional(),
      title: stringComparatorSchema.optional(),
    })
);

export const userFilterSchema: z.ZodSchema<UserFilter> = z.lazy(() =>
  z.object({
    active: booleanComparatorSchema.optional(),
    admin: booleanComparatorSchema.optional(),
    and: z.array(userFilterSchema).optional(),
    assignedIssues: issueCollectionFilterSchema.optional(),
    displayName: stringComparatorSchema.optional(),
    email: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    isMe: booleanComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(userFilterSchema).optional(),
  })
);

export const issueCollectionFilterSchema: z.ZodSchema<IssueCollectionFilter> = z.lazy(() =>
  z.object({
    and: z.array(issueCollectionFilterSchema).optional(),
    assignee: nullableUserFilterSchema.optional(),
    attachments: attachmentCollectionFilterSchema.optional(),
    children: issueCollectionFilterSchema.optional(),
    comments: commentCollectionFilterSchema.optional(),
    completedAt: nullableDateComparatorSchema.optional(),
    creator: nullableUserFilterSchema.optional(),
    cycle: nullableCycleFilterSchema.optional(),
    description: nullableStringComparatorSchema.optional(),
    dueDate: nullableTimelessDateComparatorSchema.optional(),
    estimate: estimateComparatorSchema.optional(),
    every: issueFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    labels: issueLabelCollectionFilterSchema.optional(),
    length: numberComparatorSchema.optional(),
    number: numberComparatorSchema.optional(),
    or: z.array(issueCollectionFilterSchema).optional(),
    parent: nullableIssueFilterSchema.optional(),
    priority: nullableNumberComparatorSchema.optional(),
    project: nullableProjectFilterSchema.optional(),
    some: issueFilterSchema.optional(),
    state: workflowStateFilterSchema.optional(),
    subscribers: userCollectionFilterSchema.optional(),
    team: teamFilterSchema.optional(),
    title: stringComparatorSchema.optional(),
  })
);

export const initiativeFilterSchema: z.ZodSchema<InitiativeFilter> = z.lazy(() =>
  z.object({
    and: z.array(initiativeFilterSchema).optional(),
    creator: userFilterSchema.optional(),
    health: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(initiativeFilterSchema).optional(),
    slugId: stringComparatorSchema.optional(),
    status: stringComparatorSchema.optional(),
  })
);

export const nullableTeamFilterSchema: z.ZodSchema<NullableTeamFilter> = z.lazy(() =>
  z.object({
    and: z.array(nullableTeamFilterSchema).optional(),
    description: nullableStringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    key: stringComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    or: z.array(nullableTeamFilterSchema).optional(),
    parent: nullableTeamFilterSchema.optional(),
  })
);

export const teamFilterSchema: z.ZodSchema<TeamFilter> = z.lazy(() =>
  z.object({
    and: z.array(teamFilterSchema).optional(),
    description: nullableStringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    key: stringComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(teamFilterSchema).optional(),
    parent: nullableTeamFilterSchema.optional(),
  })
);

export const teamCollectionFilterSchema: z.ZodSchema<TeamCollectionFilter> = z.lazy(() =>
  z.object({
    and: z.array(teamCollectionFilterSchema).optional(),
    every: teamFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    length: numberComparatorSchema.optional(),
    or: z.array(teamCollectionFilterSchema).optional(),
    some: teamFilterSchema.optional(),
  })
);

export const initiativeCollectionFilterSchema: z.ZodSchema<InitiativeCollectionFilter> = z.lazy(
  () =>
    z.object({
      and: z.array(initiativeCollectionFilterSchema).optional(),
      creator: userFilterSchema.optional(),
      every: initiativeFilterSchema.optional(),
      health: stringComparatorSchema.optional(),
      id: idComparatorSchema.optional(),
      length: numberComparatorSchema.optional(),
      name: stringComparatorSchema.optional(),
      or: z.array(initiativeCollectionFilterSchema).optional(),
      some: initiativeFilterSchema.optional(),
      status: stringComparatorSchema.optional(),
    })
);

export const userCollectionFilterSchema: z.ZodSchema<UserCollectionFilter> = z.lazy(() =>
  z.object({
    active: booleanComparatorSchema.optional(),
    admin: booleanComparatorSchema.optional(),
    and: z.array(userCollectionFilterSchema).optional(),
    assignedIssues: issueCollectionFilterSchema.optional(),
    displayName: stringComparatorSchema.optional(),
    email: stringComparatorSchema.optional(),
    every: userFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    isMe: booleanComparatorSchema.optional(),
    length: numberComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(userCollectionFilterSchema).optional(),
    some: userFilterSchema.optional(),
  })
);

export const nullableCycleFilterSchema: z.ZodSchema<NullableCycleFilter> = z.lazy(() =>
  z.object({
    and: z.array(nullableCycleFilterSchema).optional(),
    endsAt: dateComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    isActive: booleanComparatorSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    name: stringComparatorSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    number: numberComparatorSchema.optional(),
    or: z.array(nullableCycleFilterSchema).optional(),
    startsAt: dateComparatorSchema.optional(),
    team: teamFilterSchema.optional(),
  })
);

export const issueLabelFilterSchema: z.ZodSchema<IssueLabelFilter> = z.lazy(() =>
  z.object({
    and: z.array(issueLabelFilterSchema).optional(),
    creator: nullableUserFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(issueLabelFilterSchema).optional(),
    parent: issueLabelFilterSchema.optional(),
    team: nullableTeamFilterSchema.optional(),
  })
);

export const issueLabelCollectionFilterSchema: z.ZodSchema<IssueLabelCollectionFilter> = z.lazy(
  () =>
    z.object({
      and: z.array(issueLabelCollectionFilterSchema).optional(),
      creator: nullableUserFilterSchema.optional(),
      every: issueLabelFilterSchema.optional(),
      id: idComparatorSchema.optional(),
      length: numberComparatorSchema.optional(),
      name: stringComparatorSchema.optional(),
      or: z.array(issueLabelCollectionFilterSchema).optional(),
      parent: issueLabelFilterSchema.optional(),
      some: issueLabelFilterSchema.optional(),
      team: nullableTeamFilterSchema.optional(),
    })
);

export const roadmapFilterSchema: z.ZodSchema<RoadmapFilter> = z.lazy(() =>
  z.object({
    and: z.array(roadmapFilterSchema).optional(),
    creator: userFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(roadmapFilterSchema).optional(),
    slugId: stringComparatorSchema.optional(),
  })
);

export const roadmapCollectionFilterSchema: z.ZodSchema<RoadmapCollectionFilter> = z.lazy(() =>
  z.object({
    and: z.array(roadmapCollectionFilterSchema).optional(),
    creator: userFilterSchema.optional(),
    every: roadmapFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    length: numberComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(roadmapCollectionFilterSchema).optional(),
    some: roadmapFilterSchema.optional(),
  })
);

export const nullableProjectFilterSchema: z.ZodSchema<NullableProjectFilter> = z.lazy(() =>
  z.object({
    accessibleTeams: teamCollectionFilterSchema.optional(),
    and: z.array(nullableProjectFilterSchema).optional(),
    completedAt: nullableDateComparatorSchema.optional(),
    creator: userFilterSchema.optional(),
    customerCount: numberComparatorSchema.optional(),
    hasBlockedByRelations: relationExistsComparatorSchema.optional(),
    hasBlockingRelations: relationExistsComparatorSchema.optional(),
    health: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    initiatives: initiativeCollectionFilterSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    lead: nullableUserFilterSchema.optional(),
    members: userCollectionFilterSchema.optional(),
    name: stringComparatorSchema.optional(),
    needs: customerNeedCollectionFilterSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    or: z.array(nullableProjectFilterSchema).optional(),
    priority: nullableNumberComparatorSchema.optional(),
    projectMilestones: projectMilestoneCollectionFilterSchema.optional(),
    slugId: stringComparatorSchema.optional(),
    startDate: nullableDateComparatorSchema.optional(),
    status: projectStatusFilterSchema.optional(),
    targetDate: nullableDateComparatorSchema.optional(),
  })
);

export const customerNeedCollectionFilterSchema: z.ZodSchema<CustomerNeedCollectionFilter> = z.lazy(
  () =>
    z.object({
      and: z.array(customerNeedCollectionFilterSchema).optional(),
      comment: nullableCommentFilterSchema.optional(),
      customer: nullableCustomerFilterSchema.optional(),
      every: customerNeedFilterSchema.optional(),
      id: idComparatorSchema.optional(),
      issue: nullableIssueFilterSchema.optional(),
      length: numberComparatorSchema.optional(),
      or: z.array(customerNeedCollectionFilterSchema).optional(),
      priority: numberComparatorSchema.optional(),
      project: nullableProjectFilterSchema.optional(),
      some: customerNeedFilterSchema.optional(),
    })
);

export const projectStatusFilterSchema: z.ZodSchema<ProjectStatusFilter> = z.lazy(() =>
  z.object({
    and: z.array(projectStatusFilterSchema).optional(),
    description: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(projectStatusFilterSchema).optional(),
    position: numberComparatorSchema.optional(),
    projects: projectCollectionFilterSchema.optional(),
    type: stringComparatorSchema.optional(),
  })
);

export const workflowStateFilterSchema: z.ZodSchema<WorkflowStateFilter> = z.lazy(() =>
  z.object({
    and: z.array(workflowStateFilterSchema).optional(),
    description: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(workflowStateFilterSchema).optional(),
    position: numberComparatorSchema.optional(),
    team: teamFilterSchema.optional(),
    type: stringComparatorSchema.optional(),
  })
);

export const nullableProjectUpdateFilterSchema: z.ZodSchema<NullableProjectUpdateFilter> = z.lazy(
  () =>
    z.object({
      and: z.array(nullableProjectUpdateFilterSchema).optional(),
      id: idComparatorSchema.optional(),
      null: scalarsSchema.shape.Boolean.optional(),
      or: z.array(nullableProjectUpdateFilterSchema).optional(),
      project: projectFilterSchema.optional(),
      reactions: reactionCollectionFilterSchema.optional(),
      user: userFilterSchema.optional(),
    })
);

export const projectFilterSchema: z.ZodSchema<ProjectFilter> = z.lazy(() =>
  z.object({
    accessibleTeams: teamCollectionFilterSchema.optional(),
    and: z.array(projectFilterSchema).optional(),
    completedAt: nullableDateComparatorSchema.optional(),
    creator: userFilterSchema.optional(),
    health: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    lead: nullableUserFilterSchema.optional(),
    members: userCollectionFilterSchema.optional(),
    name: stringComparatorSchema.optional(),
    or: z.array(projectFilterSchema).optional(),
    priority: nullableNumberComparatorSchema.optional(),
    startDate: nullableDateComparatorSchema.optional(),
    status: projectStatusFilterSchema.optional(),
    targetDate: nullableDateComparatorSchema.optional(),
  })
);

export const nullableIssueFilterSchema: z.ZodSchema<NullableIssueFilter> = z.lazy(() =>
  z.object({
    and: z.array(nullableIssueFilterSchema).optional(),
    assignee: nullableUserFilterSchema.optional(),
    attachments: attachmentCollectionFilterSchema.optional(),
    children: issueCollectionFilterSchema.optional(),
    comments: commentCollectionFilterSchema.optional(),
    completedAt: nullableDateComparatorSchema.optional(),
    creator: nullableUserFilterSchema.optional(),
    cycle: nullableCycleFilterSchema.optional(),
    description: nullableStringComparatorSchema.optional(),
    dueDate: nullableTimelessDateComparatorSchema.optional(),
    estimate: estimateComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    labels: issueLabelCollectionFilterSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    number: numberComparatorSchema.optional(),
    or: z.array(nullableIssueFilterSchema).optional(),
    parent: nullableIssueFilterSchema.optional(),
    priority: nullableNumberComparatorSchema.optional(),
    project: nullableProjectFilterSchema.optional(),
    reactions: reactionCollectionFilterSchema.optional(),
    slaStatus: slaStatusComparatorSchema.optional(),
    state: workflowStateFilterSchema.optional(),
    subscribers: userCollectionFilterSchema.optional(),
    team: teamFilterSchema.optional(),
    title: stringComparatorSchema.optional(),
  })
);

export const commentCollectionFilterSchema: z.ZodSchema<CommentCollectionFilter> = z.lazy(() =>
  z.object({
    and: z.array(commentCollectionFilterSchema).optional(),
    body: stringComparatorSchema.optional(),
    documentContent: nullableDocumentContentFilterSchema.optional(),
    every: commentFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    issue: nullableIssueFilterSchema.optional(),
    length: numberComparatorSchema.optional(),
    needs: customerNeedCollectionFilterSchema.optional(),
    or: z.array(commentCollectionFilterSchema).optional(),
    parent: nullableCommentFilterSchema.optional(),
    projectUpdate: nullableProjectUpdateFilterSchema.optional(),
    reactions: reactionCollectionFilterSchema.optional(),
    some: commentFilterSchema.optional(),
    user: userFilterSchema.optional(),
  })
);

export const nullableCommentFilterSchema: z.ZodSchema<NullableCommentFilter> = z.lazy(() =>
  z.object({
    and: z.array(nullableCommentFilterSchema).optional(),
    body: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issue: nullableIssueFilterSchema.optional(),
    needs: customerNeedCollectionFilterSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    or: z.array(nullableCommentFilterSchema).optional(),
    parent: nullableCommentFilterSchema.optional(),
    projectUpdate: nullableProjectUpdateFilterSchema.optional(),
    reactions: reactionCollectionFilterSchema.optional(),
    user: userFilterSchema.optional(),
  })
);

export const nullableCustomerFilterSchema: z.ZodSchema<NullableCustomerFilter> = z.lazy(() =>
  z.object({
    and: z.array(nullableCustomerFilterSchema).optional(),
    domains: stringArrayComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    name: stringComparatorSchema.optional(),
    needs: customerNeedCollectionFilterSchema.optional(),
    null: scalarsSchema.shape.Boolean.optional(),
    or: z.array(nullableCustomerFilterSchema).optional(),
    owner: nullableUserFilterSchema.optional(),
    revenue: numberComparatorSchema.optional(),
    status: customerStatusFilterSchema.optional(),
    tier: customerTierFilterSchema.optional(),
  })
);

export const customerNeedFilterSchema: z.ZodSchema<CustomerNeedFilter> = z.lazy(() =>
  z.object({
    and: z.array(customerNeedFilterSchema).optional(),
    comment: nullableCommentFilterSchema.optional(),
    customer: nullableCustomerFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    issue: nullableIssueFilterSchema.optional(),
    or: z.array(customerNeedFilterSchema).optional(),
    priority: numberComparatorSchema.optional(),
    project: nullableProjectFilterSchema.optional(),
  })
);

export const projectCollectionFilterSchema: z.ZodSchema<ProjectCollectionFilter> = z.lazy(() =>
  z.object({
    accessibleTeams: teamCollectionFilterSchema.optional(),
    and: z.array(projectCollectionFilterSchema).optional(),
    completedAt: nullableDateComparatorSchema.optional(),
    creator: userFilterSchema.optional(),
    customerCount: numberComparatorSchema.optional(),
    every: projectFilterSchema.optional(),
    health: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issues: issueCollectionFilterSchema.optional(),
    lead: nullableUserFilterSchema.optional(),
    length: numberComparatorSchema.optional(),
    members: userCollectionFilterSchema.optional(),
    name: stringComparatorSchema.optional(),
    needs: customerNeedCollectionFilterSchema.optional(),
    or: z.array(projectCollectionFilterSchema).optional(),
    priority: nullableNumberComparatorSchema.optional(),
    some: projectFilterSchema.optional(),
    startDate: nullableDateComparatorSchema.optional(),
    status: projectStatusFilterSchema.optional(),
    targetDate: nullableDateComparatorSchema.optional(),
  })
);

export const documentFilterSchema: z.ZodSchema<DocumentFilter> = z.lazy(() =>
  z.object({
    and: z.array(documentFilterSchema).optional(),
    creator: userFilterSchema.optional(),
    id: idComparatorSchema.optional(),
    initiative: initiativeFilterSchema.optional(),
    or: z.array(documentFilterSchema).optional(),
    project: projectFilterSchema.optional(),
    title: stringComparatorSchema.optional(),
  })
);

export const nullableDocumentContentFilterSchema: z.ZodSchema<NullableDocumentContentFilter> =
  z.lazy(() =>
    z.object({
      and: z.array(nullableDocumentContentFilterSchema).optional(),
      document: documentFilterSchema.optional(),
      id: idComparatorSchema.optional(),
      null: scalarsSchema.shape.Boolean.optional(),
      or: z.array(nullableDocumentContentFilterSchema).optional(),
      project: projectFilterSchema.optional(),
    })
  );

export const commentFilterSchema: z.ZodSchema<CommentFilter> = z.lazy(() =>
  z.object({
    and: z.array(commentFilterSchema).optional(),
    body: stringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    issue: nullableIssueFilterSchema.optional(),
    needs: customerNeedCollectionFilterSchema.optional(),
    or: z.array(commentFilterSchema).optional(),
    parent: nullableCommentFilterSchema.optional(),
    projectUpdate: nullableProjectUpdateFilterSchema.optional(),
    reactions: reactionCollectionFilterSchema.optional(),
    user: userFilterSchema.optional(),
  })
);

export const issueFilterSchema: z.ZodSchema<IssueFilter> = z.lazy(() =>
  z.object({
    and: z.array(issueFilterSchema).optional(),
    assignee: nullableUserFilterSchema.optional(),
    children: issueCollectionFilterSchema.optional(),
    comments: commentCollectionFilterSchema.optional(),
    description: nullableStringComparatorSchema.optional(),
    id: idComparatorSchema.optional(),
    labels: issueLabelCollectionFilterSchema.optional(),
    or: z.array(issueFilterSchema).optional(),
    parent: nullableIssueFilterSchema.optional(),
    project: nullableProjectFilterSchema.optional(),
    team: teamFilterSchema.optional(),
    title: stringComparatorSchema.optional(),
  })
);
